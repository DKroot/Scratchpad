import org.apache.tools.ant.util.TeeOutputStream

plugins {
  id 'base'
}

println "Built by Gradle ${gradle.gradleVersion} (${gradle.gradleHomeDir})"
def systemEnv = System.getenv()
// a Java Map of env. vars
def sysPath = systemEnv.getOrDefault("PATH", systemEnv.Path)
println "Using PATH=${sysPath}"

// Print command line of all `Exec` tasks (but not direct `exec {}` calls
allprojects {
  tasks.withType(Exec) {
    doFirst {
      println "${workingDir}> `${commandLine.join ' '}`"
    }
  }
}

task myExec(type: Exec) {
  doFirst {
    println "\nExecuting a command"
    println '====='
  }

  //workingDir '../tomcat/bin'
  commandLine 'ls'

  doLast {
    println '====='
  }
}

String runAndCaptureStdOut(cmdLineArgs, suppressFailures = false) {
  println "${projectDir}> `${cmdLineArgs.join ' '}`"
  new ByteArrayOutputStream().withStream { cmdStdOut ->
    exec {
      commandLine cmdLineArgs
      standardOutput new TeeOutputStream(System.out, cmdStdOut)
      ignoreExitValue suppressFailures
    }
    cmdStdOut.toString()
  }
}

Tuple2<String, String> runAndCaptureStdOutStdErr(cmdLineArgs, suppressFailures = false) {
  println "${projectDir}> `${cmdLineArgs.join ' '}`"
  new ByteArrayOutputStream().withStream { cmdStdOut ->
    new ByteArrayOutputStream().withStream { cmdStdErr ->
      exec {
        commandLine cmdLineArgs
        standardOutput new TeeOutputStream(System.out, cmdStdOut)
        errorOutput new TeeOutputStream(System.err, cmdStdErr)
        ignoreExitValue suppressFailures
      }
      new Tuple2<>(cmdStdOut.toString(), cmdStdErr.toString())
    }
  }
}

task main(dependsOn: myExec) {
  doLast {
    println "\nExecuting a command and suppressing a failure"
    println '====='
    def result = exec {
      commandLine 'ls', 'foo'
      ignoreExitValue true
    }
    println "Completed with the exit code: ${result.exitValue}"
    println '====='

    println "\nExecuting a command and capturing stdout and stderr"
    println '====='
    new ByteArrayOutputStream().withStream { cmdStdOut ->
      new ByteArrayOutputStream().withStream { cmdStdErr ->
        exec {
          commandLine 'ls', '-l'
          standardOutput cmdStdOut
          errorOutput cmdStdErr
        }
        println '===== stdout:'
        print cmdStdOut
        println '===== stderr:'
        print cmdStdErr
        println '====='
      }
    }

    def cmdLineArgs = ['ls', '-l']
    println "\nExecuting a command and teeing stdout and stderr"
    println '====='
    println "<main>: ${projectDir}> `${cmdLineArgs.join ' '}`"
    new ByteArrayOutputStream().withStream { cmdStdOut ->
      new ByteArrayOutputStream().withStream { cmdStdErr ->
        exec {
          commandLine cmdLineArgs
          standardOutput new TeeOutputStream(System.out, cmdStdOut)
          errorOutput new TeeOutputStream(System.err, cmdStdErr)
        }
        println '===== Captured stdout:'
        print cmdStdOut
        println '===== Captured stderr:'
        print cmdStdErr
        println '====='
      }
    }

    println "\nExecuting a command with error suppression and teeing stdout and stderr via generic function"
    println '====='
    def cmdStdOutAndStdErr = runAndCaptureStdOutStdErr(['ls', 'foo'], true)
    println '===== Captured stdout:'
    print cmdStdOutAndStdErr.first
    println '===== Captured stderr:'
    print cmdStdOutAndStdErr.second
    println '====='

    println "\nExecuting a command and teeing stdout via generic function"
    println '====='
    def cmdStdOut = runAndCaptureStdOut(['ls', '-l'])
    println '===== Captured stdout:'
    print cmdStdOut
    println '====='
  }
}


task generateConfig() {
  def configFileSource = 'config/example.service'
  project.ext.custom_prop = 'project property value'
  def generatedConfigDir = "${buildDir}/generated"

  doLast {
    def requiredVars = ['custom_prop']
    for (def requiredVar in requiredVars) {
      assert systemEnv.containsKey(requiredVar): "`$requiredVar` is not set in the environment"
      project.ext[requiredVar] = systemEnv[requiredVar]
    }

    println("\n== Project Properties ==\n")
    for (def var in project.properties.sort()) {
      println "${var.key}=${var.value}"
    }

    // Can't do filtering copy directly into the target: it requires sudo
    copy {
      from "${configFileSource}"
      into "${generatedConfigDir}"
      expand(project.properties)
      // TODO report. Blows up for an unclear reason.
      //            expand(systemEnv)
      filteringCharset = 'UTF-8'
      //            eachFile { println "${it.file} => ${generatedConfigDir}/" }
    }
  }
}

task vars() {
  group 'Help'
  description 'Prints environment variables and JVM System Properties'
  doLast {
    def systemProp = System.properties
    // a Java Map of system properties

    println("== Environment variables ==\n")
    for (def var in systemEnv.sort()) {
      println "${var.key}=${var.value}"
    }

    println("\n== JVM System Properties ==\n")
    for (def var in systemProp.sort()) {
      println "${var.key}=${var.value}"
    }
  }
}

task dockerComposeDown() {
  group 'Deployment'
  description 'Stops a Docker Compose cluster and removes stopped containers'

  doLast {
    exec {
      // Safe to use when the cluster is not up
      commandLine 'docker-compose', 'down'
    }
  }
}

defaultTasks = ['main']