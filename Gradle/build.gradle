/*
## Main tasks ##

  main                        demo different Gradle features

## Informational tasks ##

  vars (v)                    shows environment variables and JVM System Properties

  properties (prop)           shows project properties

  dependencies (depe)         shows dependency trees for all configurations
    Options:
      --configuration {dependency-configuration-name}

  buildEnvironment (bE)       shows dependency tree for plugins

  tiTree {task}               shows the task dependencies as a tree

  tiOrder {task1} ...         shows order of all would be executed tasks

## Common options ##

  --info                      show detailed progress. Recommended for `docker`.

  --scan                      create a Gradle build scan diagnostics, published to the Gradle-hosted website
*/

plugins {
  id 'base'

  id 'de.qualersoft.jmeter' version '2.2.+'

  // Prints task metadata and dependency information
  id 'org.barfuin.gradle.taskinfo' version '1.4.+'
}

println "Built by Gradle ${gradle.gradleVersion} (${gradle.gradleHomeDir})"
def systemEnv = System.getenv()
// a Java Map of env. vars
def sysPath = systemEnv.getOrDefault("PATH", systemEnv.Path)
println "Using PATH=${sysPath}"

// Print command line of all `Exec` tasks (but not direct `exec {}` calls
allprojects {
  tasks.withType(Exec) {
    doFirst {
      println "${workingDir}> `${commandLine.join ' '}`"
    }
  }
}

task myExec(type: Exec) {
  doFirst {
    println "\nExecuting a command"
    println '====='
  }

  //workingDir '../tomcat/bin'
  commandLine 'ls'

  doLast {
    println '====='
  }
}

import org.apache.tools.ant.util.TeeOutputStream

/**
 * Executes command, tees and captures stdout
 *
 * @param cmdLineArgs
 * @param suppressFailures ignore failed commands
 * @return captured stdout
 */
String runAndCaptureStdOut(cmdLineArgs, suppressFailures = false) {
  println "${projectDir}> `${cmdLineArgs.join ' '}`"
  new ByteArrayOutputStream().withStream { cmdStdOut ->
    exec {
      commandLine cmdLineArgs
      standardOutput new TeeOutputStream(System.out, cmdStdOut)
      ignoreExitValue suppressFailures
    }
    cmdStdOut.toString()
  }
}

/**
 * Executes command, tees and captures stdout and stderr. Ignores failed commands.
 *
 * @param cmdLineArgs
 * @return a tuple of captured stdout + captured stderr
 */
Tuple2<String, String> runAndCaptureStdOutStdErr(cmdLineArgs) {
  println "${projectDir}> `${cmdLineArgs.join ' '}`"
  new ByteArrayOutputStream().withStream { cmdStdOut ->
    new ByteArrayOutputStream().withStream { cmdStdErr ->
      exec {
        commandLine cmdLineArgs
        standardOutput new TeeOutputStream(System.out, cmdStdOut)
        errorOutput new TeeOutputStream(System.err, cmdStdErr)
        ignoreExitValue true
      }
      new Tuple2<>(cmdStdOut.toString(), cmdStdErr.toString())
    }
  }
}

task main(dependsOn: myExec) {
  doLast {
    println "\nExecuting a command and suppressing a failure"
    println '====='
    def result = exec {
      commandLine 'ls', 'foo'
      ignoreExitValue true
    }
    println "Completed with the exit code: ${result.exitValue}"
    println '====='

    println "\nExecuting a command and capturing stdout and stderr"
    println '====='
    new ByteArrayOutputStream().withStream { cmdStdOut ->
      new ByteArrayOutputStream().withStream { cmdStdErr ->
        exec {
          commandLine 'ls', '-l'
          standardOutput cmdStdOut
          errorOutput cmdStdErr
        }
        println '===== stdout:'
        print cmdStdOut
        println '===== stderr:'
        print cmdStdErr
        println '====='
      }
    }

    def cmdLineArgs = ['ls', '-l']
    println "\nExecuting a command and teeing stdout and stderr"
    println '====='
    println "<main>: ${projectDir}> `${cmdLineArgs.join ' '}`"
    new ByteArrayOutputStream().withStream { cmdStdOut ->
      new ByteArrayOutputStream().withStream { cmdStdErr ->
        exec {
          commandLine cmdLineArgs
          standardOutput new TeeOutputStream(System.out, cmdStdOut)
          errorOutput new TeeOutputStream(System.err, cmdStdErr)
        }
        println '===== Captured stdout:'
        print cmdStdOut
        println '===== Captured stderr:'
        print cmdStdErr
        println '====='
      }
    }

    println "\nExecuting a command with error suppression and teeing stdout and stderr via generic function"
    println '====='
    def cmdOutput = runAndCaptureStdOutStdErr(['ls', 'foo'])
    println '===== Captured stdout:'
    print cmdOutput.first
    println '===== Captured stderr:'
    print cmdOutput.second
    println '====='

    println "\nExecuting a command andÏ€ teeing stdout via generic function"
    println '====='
    def cmdStdOut = runAndCaptureStdOut(['ls', '-l'])
    println '===== Captured stdout:'
    print cmdStdOut
    println '====='
  }
}


task generateConfig() {
  def configFileSource = 'config/example.service'
  project.ext.custom_prop = 'project property value'
  def generatedConfigDir = "${buildDir}/generated"

  doLast {
    def requiredVars = ['custom_prop']
    for (def requiredVar in requiredVars) {
      assert systemEnv.containsKey(requiredVar): "`$requiredVar` is not set in the environment"
      project.ext[requiredVar] = systemEnv[requiredVar]
    }

    println("\n== Project Properties ==\n")
    for (def var in project.properties.sort()) {
      println "${var.key}=${var.value}"
    }

    // Can't do filtering copy directly into the target: it requires sudo
    copy {
      from "${configFileSource}"
      into "${generatedConfigDir}"
      expand(project.properties)
      // TODO report. Blows up for an unclear reason.
      //            expand(systemEnv)
      filteringCharset = 'UTF-8'
      //            eachFile { println "${it.file} => ${generatedConfigDir}/" }
    }
  }
}

tasks.register('vars') {
  group 'Help'
  description 'Prints environment, JVM System Properties and other project info.'
  doLast {
    println '== Environment variables ==\n'
    systemEnv.sort().each { key, value -> println "${key}=${value}"
    }

    println '\n== JVM System Properties ==\n'
    System.properties.sort().each { key, value -> println "${key}=${value}"
    }

    println '\n== Project Properties ==\n'
    project.properties.sort().each { key, value ->
      if (key != 'properties')
        println "${key}=${value}"
    }
  }
}

defaultTasks = ['main']