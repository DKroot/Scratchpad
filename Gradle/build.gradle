plugins {
    id 'base'
}

println "Built by Gradle ${gradle.gradleVersion} (${gradle.gradleHomeDir})"
def systemEnv = System.getenv() // a Java Map of env. vars
def sysPath = systemEnv.getOrDefault("PATH", systemEnv.Path)
println "Using PATH=${sysPath}"

task main() {
    doLast {
        println "\nExecuting a command and suppressing failures"
        println '====='
        def result = exec {
            ignoreExitValue = true
            commandLine 'ls', 'foo'
        }
        //assert (result.exitValue > 0) : 'Execution failed'
        println '====='

        println "\nFast-failing a command"
        println '====='
        exec {
            commandLine 'ls', 'foo'
        }
        println '====='
    }
}

task generateConfig() {
    def configFileSource ='config/example.service'
    project.ext.custom_prop = 'project property value'
    def generatedConfigDir = "${buildDir}/generated"

    doLast {
        def requiredVars = ['custom_prop']
        for (def requiredVar in requiredVars) {
            assert systemEnv.containsKey(requiredVar): "`$requiredVar` is not set in the environment"
            project.ext[requiredVar] = systemEnv[requiredVar]
        }

        println("\n== Project Properties ==\n")
        for (def var in project.properties.sort()) {
            println "${var.key}=${var.value}"
        }

        // Can't do filtering copy directly into the target: it requires sudo
        copy {
            from "${configFileSource}"
            into "${generatedConfigDir}"
            expand(project.properties)
            // TODO report. Blows up for an unclear reason.
//            expand(systemEnv)
            filteringCharset = 'UTF-8'
//            eachFile { println "${it.file} => ${generatedConfigDir}/" }
        }
    }
}

task vars() {
    group 'Help'
    description 'Prints environment variables and JVM System Properties'
    doLast {
        def systemProp = System.properties // a Java Map of system properties

        println("== Environment variables ==\n")
        for (def var in systemEnv.sort()) {
            println "${var.key}=${var.value}"
        }

        println("\n== JVM System Properties ==\n")
        for (def var in systemProp.sort()) {
            println "${var.key}=${var.value}"
        }
    }
}

task dockerComposeDown() {
    group 'Deployment'
    description 'Stops a Docker Compose cluster and removes stopped containers'

    doLast {
        exec {
            // Safe to use when the cluster is not up
            commandLine 'docker-compose', 'down'
        }
    }
}

defaultTasks = ['main']