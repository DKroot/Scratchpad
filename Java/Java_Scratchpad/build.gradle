//file:noinspection GroovyAssignabilityCheck // false positives
//file:noinspection GrUnresolvedAccess // False positives

plugins {
  /*
  Applying the `application` plugin also implicitly applies the Java plugin. The main source set is effectively the
  `application`.

  Applying the `application` plugin also implicitly applies the `distribution` plugin.
  */
  id 'application'

  /*
  Adds Lombok dependency to `annotationProcessor` and `compileOnly` configurations of each source set.
  The `javadoc` task will be configured to read the `delombok`-ed sources instead of the actual sources.
  Recommended to use by Lombok.
  */
  id 'io.freefair.lombok' version '6.4.+'
  //endregion
}
// == Configuration ==

/*
For JDBC-OCI the major.minor version of the client should match the version of the Oracle JDBC Driver.

Format:
  * `{driver JAR}:{major}.{minor}`

Examples:
  * (Linux) `ojdbc11:23.4`
  * (Mac) `ojdbc10:19.8`
*/
//
def oracleJdbcDriver = project.findProperty('oracleJdbcDriver') ?: 'ojdbc10:19.8'

description = 'Java Demos'
defaultTasks('test')

println "\n${description}"
println "Built by Gradle ${gradle.gradleVersion} (${gradle.gradleHomeDir})"

repositories {
  mavenCentral()
}

dependencies {
  // Ordered from high-level down to low-level

  implementation(//
      // Oracle JDBC Driver
      "com.oracle.database.jdbc:${oracleJdbcDriver}.+",

      // CSV Parser and Printer
      'org.apache.commons:commons-csv:1.9.+',

      // Generic utilities. Google Guava is preferred over Apache Commons Lang 3.
      'com.google.guava:guava:31.0.+',

      // Handy JavaBeans helpers
      'commons-beanutils:commons-beanutils:1.9.+',

      // Logging API: SLF4J
      'org.slf4j:slf4j-api:1.7.+')

  testImplementation(//
      // JUnit
      'junit:junit:4.13.+')

  runtimeOnly( //
      'net.sourceforge.jtds:jtds:1.3.+',

      // For JDBC-OCI the major.minor version of the client should match the version of the Oracle JDBC Driver
      //"com.oracle.database.jdbc:${oracleJdbcDriver}.+",

      // Logging Implementation: LogBack. Depends on `org.slf4j:slf4j-api:1.7.25`.
      'ch.qos.logback:logback-classic:1.2.+')
}

java {
  /*
  Set up all compile, test and javadoc tasks to use the defined toolchain which may be different than the one Gradle
  itself uses. Gradle detects locally installed JVMs and chooses a JRE/JDK matching the requirements. If no match is
  found, it will automatically download it from a specified vendor.
  */
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    //vendor = JvmVendorSpec.AMAZON // optional, defaults to `AdoptOpenJDK`
  }

  consistentResolution {
    useCompileClasspathVersions()
  }
}

application {
  mainClass = 'org.houseofsoft.JdbcOracleConnectionDemo'
}

test {
  testLogging {
    // set options for log level LIFECYCLE
    //noinspection GrUnresolvedAccess
    events "started", "passed", "skipped", "failed"
    // make the standard output streams visible at console when running tests
    showStandardStreams = true
  }

  // configure java.util.logging for the test JVM(s)
  systemProperty 'java.util.logging.config.file', 'build/resources/test/logging.properties'
}