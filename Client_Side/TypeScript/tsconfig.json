{
  "compilerOptions": { //alphabetically ordered options
    // Allow default imports from modules with no default export. This does not affect code emit.
    "allowSyntheticDefaultImports": true,

    // Enables experimental support for ES decorators.
    "experimentalDecorators": true,

    // Module code generation: "none", "commonjs", "amd", "system", "umd", "es6" or "es2015".
    "module": "amd",

    /* There are two possible module resolution strategies: Node and Classic. You can use the
    --moduleResolution flag to specify the module resolution strategy. If not specified,
    the default is Classic for --module AMD | System | ES2015 or Node otherwise. */
    "moduleResolution": "node",

    // Raise error on expressions and declarations with an implied any type.
    "noImplicitAny": true,

    // TypeScript will issue an error when this is used without an explicit (or inferred) type.
    "noImplicitThis": true,

    // Used by `tsc` CLI and IDEA. Overridden (ignored) by the project Gradle build.
    //"outDir": "target/classes/static/components",

    // Generates corresponding .map file(s).
    "sourceMap": true,

    /* In strict null checking mode, the null and undefined values are not in the domain of every
    type and are only assignable to themselves and any */
    "strictNullChecks": true,

    // this aligns with Vue's 2.x browser support
    "target": "ES5",

    // Compile-time declaration libraries: include only the ones actually needed
    "lib": [
      //region ES5 defaults
      "DOM",
      "ES5",
      "ScriptHost",
      //endregion

      // Object.assign()
      // String.prototype.includes()
      // String.prototype.startsWith(), String.prototype.endsWith()
      "ES2015.Core",

      // Map
      "ES2015.Collection",

      // Array.prototype.includes()
      "ES2016.Array.Include",

      // Object.values()
      "ES2017.Object",

      // String.prototype.padStart()
      "ES2017.String"
    ]
  },
  "include": [
    "src/main/ts/*"
  ]
}