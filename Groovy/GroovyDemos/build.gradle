//file:noinspection GroovyAssignabilityCheck // False positives in `group`/`description` assignments
//file:noinspection GrUnresolvedAccess // False positives in `println()`

plugins {
  id 'groovy'
}

description = 'Groovy Demos'
println "\n${description} v${version}"
println "Built by Gradle ${gradle.gradleVersion} (${gradle.gradleHomeDir})"
def systemEnv = System.getenv()
//def os = System.getProperty('os.name').toLowerCase()
def sysPath = systemEnv.getOrDefault('PATH', systemEnv['Path'])
println "PATH=${sysPath}"

repositories {
  // The Maven central repository
  mavenCentral()
}

dependencies {
  //region Groovy 3.0.x
  implementation 'org.codehaus.groovy:groovy:3.0.+:indy'

  /*
  Consuming Groovy modules mistakenly also adds non-INDY (`invokedynamic`) version of the Groovy core transitively.
  However, a workaround is cumbersome (e.g. see https://github.com/gradle/gradle/issues/9318) and the code is compiled
  and runs fine with `invokedynamic` as long as INDY JARs are present.

  More info: https://melix.github.io/blog/2013/01/31/using_groovy_to_play_with.html
  */

  implementation 'org.codehaus.groovy:groovy-sql:3.0.+:indy'
  /* Does not work:
  implementation 'org.codehaus.groovy:groovy-sql:3.0.+:indy' {
    transitive = false
  }*/

  implementation 'org.codehaus.groovy:groovy-datetime:3.0.+:indy'
  //endregion

  // picocli: CLI processing
//  implementation 'info.picocli:picocli-groovy:4.6.+'
  implementation 'info.picocli:picocli:4.6.+'

  testImplementation 'org.hamcrest:hamcrest-core:2.+'
}

tasks.withType(GroovyCompile) {
  groovyOptions.with {
    configurationScript = file('groovycConfig.groovy')
    optimizationOptions.indy = true
  }
}